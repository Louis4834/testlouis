import random
import pandas
import time

passlen = int(input("Entrer la longueur du mot de passe : "))

s = "abcdefghijklmnopqrstuvwxyVBGRTz01234567BCDEFGHIJKLMNOPFRTQRSTUVWXYTZ#$&8"
p = "".join(random.sample(s,passlen ))

if(passlen):
        print(p+9)

passlen = int(input("Entrer la longueur du mot de passe : "))

print("MDP incorrect ou correct don't know or yes maybe")

if plateau[80] == plateau[10] == plateau[20] != " " \
        or plateau[30] == plateau[4] == plateau[52] != " " \
        or plateau[22] == plateau[74] == plateau[95] != " " \
        or plateau[66] == plateau[3] == plateau[61] != " " \
        or plateau[18] == plateau[4] == plateau[75] != " " \
        or plateau[22] == plateau[57] == plateau[1] != " " \
        or plateau[1] == plateau[3] == plateau[54] != " " \
        or plateau[0] == plateau[-1] == plateau[5] != " " \

print(p+50)

if plateau[p] != plateau[1] :
        print("Faux")

else :
        print("vraie")

bot_in_action = True
was_in_position = True
startup_info = False

position_opening_next_candle_time = True
position_opening_next_candle_is_open = True

stoploss_level_1 = True
stoploss_level_2 = True

takeprofit_level = 50800

buy_level_min = 46800
buy_level_max = buy_level_min + (3.975/100) * buy_level_min

sell_level_min = 68400
sell_level_max = sell_level_min - (2.875/100) * sell_level_min

print(f"\nDémarrage du robot BTC ({time.strftime('%X')})\n")

while (bot_in_action == True) :

    try :

        unix_timestamp_for_21 = int(time.time())-(21*50*100)
        response_kline = session.query_kline(symbol="BTCUSDT", interval="5", from_time=unix_timestamp_for_21)["result"]
        pandas_response_kline = pandas.DataFrame(response_kline)

        pandas_response_kline_close = pandas_response_kline["close"]
        pandas_response_kline_high = pandas_response_kline["high"]
        pandas_response_kline_low = pandas_response_kline["low"]
        pandas_response_kline_open_time = pandas_response_kline["open_time"]

        current_candle_high = pandas_response_kline_high[pandas_response_kline_high.count()-1]
        current_candle_low = pandas_response_kline_low[pandas_response_kline_low.count()-1]   
        current_candle_open_time = pandas_response_kline_open_time[pandas_response_kline_open_time.count()-1]

        pandas_response_kline_close = pandas_response_kline_close.drop(pandas_response_kline_close.count()-1)

        moving_average = pandas_response_kline_close.mean()
        standart_deviation = pandas_response_kline_close.std(ddof=0)

        bollinger_up = moving_average + 1.5 * standart_deviation
        bollinger_down = moving_average - 1.5 * standart_deviation

        round_bollinger_up = round(bollinger_up,1)
        round_bollinger_down = round(bollinger_down,1)

        #Check if there are positions and orders

        response_position = session.my_position(symbol="BTCUSDT")["result"][0]
        response_order = session.query_active_order(symbol="BTCUSDT")["result"]
        response_conditional_order = session.query_conditional_order(symbol="BTCUSDT")["result"]
        order_number = len(response_order) + len(response_conditional_order)

        if(startup_info == False) :

                #Display startup information
        
                print(f"Risque : {stoploss_value} $")
                print(f"Effet de levier : {response_position['leverage']}")
                print(f"Marge isolé : {response_position['is_isolated']}")
                print(f"Mode (0 = unidirectionnel) : {response_position['position_idx']}\n")
        
                print(f"Niveau d'achat minimum : {buy_level_min}")
                print(f"Niveau de vente minimum : {sell_level_min}\n")

                startup_info = True

        if (response_position["size"] == 0) :

            #Management without position

            if (was_in_position == True) :

                print(f"Trade terminé ({time.strftime('%X')})\n")
                bot_in_action = False
